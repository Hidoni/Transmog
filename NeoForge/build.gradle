plugins {
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.+'
    id 'java-library'
    id "com.matthewprenger.cursegradle" version "1.4.+"
    id "com.modrinth.minotaur" version "2.+"
}
base {
    archivesName = rootProject.archivesBaseName + '-neoforge'
}
project.ext.mixin_refmap = "${archivesBaseName}-refmap.json"

// Automatically enable neoforge AccessTransformers if the file exists
// This location is hardcoded in FML and can not be changed.
// https://github.com/neoforged/FancyModLoader/blob/a952595eaaddd571fbc53f43847680b00894e0c1/loader/src/main/java/net/neoforged/fml/loading/moddiscovery/ModFile.java#L118
if (file('src/main/resources/META-INF/accesstransformer.cfg').exists()) {
    minecraft.accessTransformers.file file('src/main/resources/META-INF/accesstransformer.cfg')
}
runs {
    configureEach {
        modSource project.sourceSets.main
    }
    client {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
    }
    server {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }

    gameTestServer {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
    }

    data {
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    implementation "net.neoforged:neoforge:${neoforge_version}"
    compileOnly project(":Common")
}

processResources {
    from project(":Common").sourceSets.main.resources
    inputs.property "version", project.version

    filesMatching("mixins.*.json") {
        expand "mixin_refmap": project.ext.mixin_refmap
    }
}


// NeoGradle compiles the game, but we don't want to add our common code to the game's code
TaskCollection.metaClass.excludingNeoTasks = { ->
    delegate.matching { !it.name.startsWith("neo") }
}

tasks.withType(JavaCompile).excludingNeoTasks().configureEach {
    source(project(":Common").sourceSets.main.allSource)
}

tasks.withType(Javadoc).excludingNeoTasks().configureEach {
    source(project(":Common").sourceSets.main.allJava)
}

tasks.named("sourcesJar", Jar) {
    from(project(":Common").sourceSets.main.allSource)
}

tasks.withType(ProcessResources).excludingNeoTasks().configureEach {
    from project(":Common").sourceSets.main.resources
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId base.archivesName.get()
            from components.java
        }
    }
    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}

curseforge {

    def curseforgeToken = System.getenv("CURSEFORGE_TOKEN")
    if (curseforgeToken) {
        apiKey = curseforgeToken
    }

    project {
        id = project.curseforge_project_id
        changelogType = "markdown"
        changelog = project.ext.changelog
        releaseType = project.release_type
        "${project.supported_versions}".split(',').each {
            addGameVersion "${it}"
        }
        addGameVersion "NeoForge"
        addGameVersion "Java 17"

        mainArtifact(tasks.jar) {
            displayName = "[NeoForge] Transmog $project.version"
        }
        addArtifact(sourcesJar)
    }
}

modrinth {
    projectId = project.modrinth_project_id
    versionName = "[NeoForge] Transmog $project.version"
    versionNumber = "neoforge-${project.version}"
    versionType = project.release_type
    changelog = project.ext.changelog
    uploadFile = jar
    additionalFiles = [sourcesJar]
    gameVersions = "${project.supported_versions}".split(',') as List<String>
    loaders = ["neoforge"]
}