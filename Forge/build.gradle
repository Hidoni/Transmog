buildscript {
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7.+'
    }
}

plugins {
    id 'java'
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '6.+'
    id "com.matthewprenger.cursegradle" version "1.4.+"
    id "com.modrinth.minotaur" version "2.+"
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

archivesBaseName = rootProject.archivesBaseName + '-forge'
project.ext.mixin_refmap = "${archivesBaseName}-refmap.json"

minecraft {
    // mappings channel: 'official', version: minecraft_version
    mappings channel: 'parchment', version: "${project.parchment_minecraft_version}-${project.parchment_mappings_version}-${project.minecraft_version}"

    if (project.hasProperty('forge_ats_enabled') && project.findProperty('forge_ats_enabled').toBoolean()) {
        // This location is hardcoded in Forge and can not be changed.
        // https://github.com/MinecraftForge/MinecraftForge/blob/be1698bb1554f9c8fa2f58e32b9ab70bc4385e60/fmlloader/src/main/java/net/minecraftforge/fml/loading/moddiscovery/ModFile.java#L123
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
        project.logger.debug('Forge Access Transformers are enabled for this project.')
    }

    runs {
        client {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            arg "-mixin.config=mixins.${mod_id}.common.json"
            arg "-mixin.config=mixins.${mod_id}.forge.json"
            mods {
                modClientRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Server'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            arg "-mixin.config=mixins.${mod_id}.common.json"
            arg "-mixin.config=mixins.${mod_id}.forge.json"
            mods {
                modServerRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            args '--mod', mod_id, '--all', '--output', file('../Common/src/generated/resources/'), '--existing', file('src/main/resources/'), '--existing', file('/../Common/src/main/resources')
            taskName 'Data'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modDataRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    compileOnly project(":Common")
}

apply plugin: 'org.spongepowered.mixin'
mixin {
    add sourceSets.main, project.ext.mixin_refmap
    config 'mixins.transmog.common.json'
    config 'mixins.transmog.forge.json'
}

tasks.withType(JavaCompile) {
    source(project(":Common").sourceSets.main.allSource)
}

processResources {
    from project(":Common").sourceSets.main.resources

    filesMatching("mixins.*.json") {
        expand "mixin_refmap": project.ext.mixin_refmap
    }
}


jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}

curseforge {

    def curseforgeToken = System.getenv("CURSEFORGE_TOKEN")
    if (curseforgeToken) {
        apiKey = curseforgeToken
    }

    project {
        id = project.curseforge_project_id
        changelogType = "markdown"
        changelog = project.ext.changelog
        releaseType = project.release_type
        "${project.supported_versions}".split(',').each {
            addGameVersion "${it}"
        }
        addGameVersion "Forge"
        addGameVersion "Java 17"

        mainArtifact(tasks.jar) {
            displayName = "[Forge] Transmog $project.version"
        }
        addArtifact(sourcesJar)
    }
}

modrinth {
    projectId = project.modrinth_project_id
    versionName = "[Forge] Transmog $project.version"
    versionNumber = "forge-${project.version}"
    versionType = project.release_type
    changelog = project.ext.changelog
    uploadFile = jar
    additionalFiles = [sourcesJar]
    gameVersions = "${project.supported_versions}".split(',') as List<String>
    loaders = ["forge"]
}

sourceSets.each {
    def dir = layout.buildDirectory.dir("sourcesSets/$it.name")
    it.output.resourcesDir = dir
    it.java.destinationDirectory = dir
}
